package com.fundefs.codefixer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;

public class FileFixer {

	/**
	 * 
	 * @param files
	 */
	public static void fixFiles(List<File> files) {
		int i = files.size();
		for(File f : files) {
			System.out.println("There " + (i == 1 ? "is " : "are ") + i + (i == 1 ? " file" : " files") + " left.");
			try {
				fixFile(f);
			} catch (IOException e) {}
			i--;
		}

	}

	/**
	 * 
	 * @param f
	 * @throws IOException for preventing three try-catch blocks
	 * and replace them with one try-catch block
	 */
	private static void fixFile(File f) throws IOException {
		List<String> lines = new ArrayList<String>();
		for(String s : new String(Files.readAllBytes(f.toPath())).split("\n"))
			lines.add(s);
		if(!lines.get(0).replaceAll(" ", "").startsWith("/*1:*/")) {
			System.out.println(f.getName() + " is not a file generated by jd-gui and will not be reworked.");
			return;
		}
		String separator = String.valueOf(lines.get(0).toCharArray()[lines.get(0).toCharArray().length - 1]);
		int counter = 0;
		for(String s : lines) {
			lines.set(counter, s.replaceFirst(separator, ""));
			counter++;
		}
		//		System.out.println("The file " + f.getName() + " will be reworked now.");
		lines = removeCommentsAndSinnlesLines(lines);
		lines = replaceSpacesWithTabs(lines);
		lines = moveUselessLineContendUpALine(lines);

		f.delete();
		f.createNewFile();
		BufferedWriter writer = new BufferedWriter(new FileWriter(f));

		for(String line : lines)
			writer.write(line + separator);

		writer.close();
		//		System.out.println("The file " + f.getAbsolutePath() + " was reworked and was saved.");
	}

	/**
	 * This method will remove all "number of line" comments
	 * and the lines after the class block ends
	 * @param List of String witch should be reworked
	 * @return reworked List of String
	 */
	private static List<String> removeCommentsAndSinnlesLines(List<String> oldLines) {
		List<String> lines = new ArrayList<String>();
		for(String oldS : oldLines) {
			if(oldS.equalsIgnoreCase("")) {
				lines.add(oldS);
				return lines;
			}
			String s = "";
			int charsLeft = 3;
			for(char c : oldS.toCharArray()) {
				if(charsLeft != 0) {
					if(charsLeft == 1) charsLeft--;
					else if(c == '/') charsLeft--;
				} else s = s + c;
			}
			lines.add(s);
		}
		return lines;
	}

	/**
	 * This method will replace all two spaces with a tab
	 * @param List of String witch should be reworked
	 * @return reworked List of String
	 */
	private static List<String> replaceSpacesWithTabs(List<String> oldLines) {
		List<String> lines = new ArrayList<String>();
		for(String s : oldLines) {
			lines.add(s.replaceAll("  ", "	"));
		}
		return lines;
	}

	/**
	 * 
	 * @param oldLines
	 * @return
	 */
	private static List<String> moveUselessLineContendUpALine(List<String> oldLines) {
		List<String> lines = Mover.moveBracketsUpALine(oldLines);
		lines = Mover.moveExtentionsUpALine(lines);
		lines = Mover.moveImplementationsUpALine(lines);
		return Mover.moveExeptionsUpALine(lines);
	}

	private static class Mover {

		public static List<String> moveBracketsUpALine(List<String> oldLines) {
			List<String> lines = new ArrayList<String>();
			for (int j = 0; j < oldLines.size() - 1; j++) {
				if(oldLines.get(j + 1).replaceAll("	", "").equalsIgnoreCase("{")) {
					lines.add(oldLines.get(j) + " {");
					j++;
				} else lines.add(oldLines.get(j));
			}
			return lines;
		}
		
		public static List<String> moveImplementationsUpALine(List<String> oldLines) {
			return moveStringStartsWithUpALine(oldLines, "implements");
		}
		
		public static List<String> moveExtentionsUpALine(List<String> oldLines) {
			return moveStringStartsWithUpALine(oldLines, "extends");
		}
		
		public static List<String> moveExeptionsUpALine(List<String> oldLines) {
			return moveStringStartsWithUpALine(oldLines, "throws");
		}
		
		private static List<String> moveStringStartsWithUpALine(List<String> oldLines, String string) {
			List<String> lines = new ArrayList<String>();
			for (int j = 0; j < oldLines.size() - 1; j++) {
				if(oldLines.get(j + 1).replaceAll("	", "").startsWith(string + " ")) {
					lines.add(oldLines.get(j) + " " + oldLines.get(j + 1).replaceAll("	", ""));
					j++;
				} else lines.add(oldLines.get(j));
			}
			return lines;
		}

	}

	/**
	 * This method will return all the .java files
	 * contained in the paramed directory, and its
	 * directories, as a java.util.List<java.io.File>
	 * @param File witch is a directory
	 * @return all the .java files contained in the directory, its sub directories etc.
	 */
	public static List<File> getAllFilesOfDir(File f) {
		if(!f.isDirectory()) return null;
		List<File> files = new ArrayList<File>();
		for(File file : f.listFiles()) {
			if(file.isDirectory())
				for(File subFile : getAllFilesOfDir(file))
					files.add(subFile);
			if(file.getName().endsWith(".java"))
				files.add(file);
		}
		return files;
	}

}
